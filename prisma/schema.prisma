// Prisma schema for Game Portal + NextAuth

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  // NextAuth standard fields
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?

  // Existing domain fields
  username    String?  @unique
  firstName   String?
  lastName    String?
  avatar      String?
  balance     Float    @default(0)
  isActive    Boolean  @default(true)
  role        Role     @default(USER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  accounts     Account[]
  sessions     Session[]
  favorites    UserFavorite[]
  gameHistory  GameSession[]
  transactions Transaction[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Game {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String
  thumbnail   String
  provider    String
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  popularity  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  categoryId    String
  category      GameCategory @relation(fields: [categoryId], references: [id])
  favorites     UserFavorite[]
  gameHistory   GameSession[]
  tags          GameTag[]

  @@map("games")
}

model GameCategory {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  icon        String
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  games Game[]

  @@map("game_categories")
}

model GameSession {
  id        String    @id @default(cuid())
  startTime DateTime  @default(now())
  endTime   DateTime?
  duration  Int?

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])
  gameId String
  game   Game   @relation(fields: [gameId], references: [id])

  @@map("game_sessions")
}

model UserFavorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])
  gameId String
  game   Game   @relation(fields: [gameId], references: [id])

  @@unique([userId, gameId])
  @@map("user_favorites")
}

model GameTag {
  id   String @id @default(cuid())
  name String @unique

  // Relations
  gameId String
  game   Game   @relation(fields: [gameId], references: [id])

  @@map("game_tags")
}

model Transaction {
  id          String            @id @default(cuid())
  amount      Float
  type        TransactionType
  status      TransactionStatus @default(PENDING)
  description String?
  
  // Payment provider details
  paymentId       String? // Stripe payment intent ID, etc.
  paymentProvider String? // "stripe", "paypal", etc.
  
  // Metadata
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])
  
  @@map("transactions")
}

enum Role {
  USER
  ADMIN
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  PURCHASE
  REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

